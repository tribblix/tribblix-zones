#!/bin/ksh -p
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#

#
# Copyright (c) 2007, 2011, Oracle and/or its affiliates. All rights reserved.
#
# Copyright (c) 2013-2024 Peter C. Tribble peter.tribble@gmail.com
#

. /usr/lib/brand/tribblix-common/common.ksh

f_interrupted=$(gettext "Installation cancelled due to interrupt.\n")

m_image=$(gettext       "       Image: Preparing at %s.")
m_smf=$(gettext		" Postinstall: Copying SMF seed repository ...")

m_usage=$(gettext "\n        install [-h]")

m_done=$(gettext      " done.")

trap_cleanup() {
	print "$f_interrupted"
	exit $int_code
}

int_code=$ZONE_SUBPROC_NOTCOMPLETE
trap trap_cleanup INT

ZONENAME=""
ZONEPATH=""
TEMPLATEPATH=""

# Setup i18n output
TEXTDOMAIN="SUNW_OST_OSCMD"
export TEXTDOMAIN

while getopts "hR:T:z:" opt; do
	case $opt in
		h)	fail_usage "";;
		R)	ZONEPATH="$OPTARG" ;;
		T)	TEMPLATEPATH="$OPTARG" ;;
		z)	ZONENAME="$OPTARG" ;;
		*)	fail_usage "";;
	esac
done
shift $((OPTIND-1))

if [[ -z $ZONEPATH || -z $ZONENAME ]]; then
	print -u2 "Brand error: No zone path or name"
	exit $ZONE_SUBPROC_USAGE
fi
if [[ -n $TEMPLATEPATH ]]; then
    if [ ! -d "${TEMPLATEPATH}" ]; then
	print -u2 "Brand error: No zone path or name"
	exit $ZONE_SUBPROC_USAGE
    fi
fi

# XXX shared/common script currently uses lower case zonename & zonepath
zonename="$ZONENAME"
zonepath="$ZONEPATH"

ZONEROOT=$ZONEPATH/root

#
# using ggrep is much faster on the invocations dealing with the
# contents file
#
GREP=/usr/bin/grep
EGREP=/usr/bin/egrep
FGREP=/usr/bin/fgrep
if [ -x /usr/gnu/bin/grep ]; then
    GREP=/usr/gnu/bin/grep
    EGREP="/usr/gnu/bin/grep -E"
    FGREP="/usr/gnu/bin/grep -F"
fi

#
# Before installing the zone, set up ZFS dataset hierarchy for the zone root
# dataset.
#
create_active_ds

printf "$m_image\n" $ZONEROOT

#
# as we parse the contents file, make sure it gets flushed
#
/usr/bin/pkgadm sync

cd /

#
# basic hierarchy and mount points
#
mkdir -p $ZONEROOT/var/sadm/pkg
mkdir -p $ZONEROOT/usr $ZONEROOT/lib $ZONEROOT/mnt $ZONEROOT/sbin $ZONEROOT/export
mkdir -m 777 $ZONEROOT/tmp
ln -s ./usr/bin $ZONEROOT/bin

#
# if we're creating a zone based on a template we can short-circuit
# most of the work because it was done at template creation time
# we still have to copy package metadata from the template
#
if [[ -n $TEMPLATEPATH ]]; then
    ${EGREP} '^/(etc|root|var)' ${TEMPLATEPATH}/var/sadm/install/contents | awk '{print $1}' | awk -F= '{print $1}' | cpio -pdmq $ZONEROOT
    cd ${TEMPLATEPATH}
    find var/sadm/pkg/* var/sadm/overlays -name save -prune -o -print | cpio -pdmq $ZONEROOT
    cd /
else
#
# this is where we do all the work
#  clone other files from global zone
#
# fortunately the contents file is sorted so that directories always come
# before the files they contain, just like cpio wants
#
${EGREP} '^/(etc|root|var)' /var/sadm/install/contents | awk '{print $1}' | awk -F= '{print $1}' | cpio -pdmq $ZONEROOT
find var/sadm/pkg/* var/sadm/overlays -name save -prune -o -print | cpio -pdmq $ZONEROOT

#
# use the saved pspool files, if we have them
# FIXME fix up the timestamps
# (the ownership and permissions should be correct from the original cpio)
#
find /var/sadm/pkg/*/save/pspool -xdev -type f | ${EGREP} 'pspool/.*/reloc/(etc|root|var)' | awk -v DEST=$ZONEROOT '{s=$1; gsub(/.*reloc/,"",s); print "cp "$1, DEST""s }' | sh -s

#
# remove metadata for any installed packages that populate /opt
#
for opkg in `${GREP} '^/opt ' /var/sadm/install/contents | cut -d ' ' -f7- | sed s:SUNWcs::` `cat /usr/lib/brand/tribblix-common/pkg.ignorelist`
do
    rm -fr $ZONEROOT/var/sadm/pkg/$opkg
done

#
# This is where the dragons live.
# Unfortunately, /lib contains the SMF manifests (which is an unfortunate place
# for them), so we need to create a sacrificial alternate copy and then delete
# the manifests that aren't valid in a zone
#
# Note that /zonelib/lib must exist beforehand, else zone verification will
# fail, so the path is provided by packaging. We need to populate it here if
# that has not been done already - the first zone creation will trigger
# population.
#
CFGZONELIB=$(LC_ALL=C zonecfg -z $ZONENAME info fs dir=/lib | grep special: | awk '{print $NF}')
ZONELIBTOP=${CFGZONELIB%/*}
ZONELIB="${ZONELIBTOP}/lib"
if [ ! -d ${ZONELIBTOP}/lib/svc ]; then
${GREP} '^/lib' /var/sadm/install/contents | awk '{print $1}' | sed -e 's:=: :' -e 's:/::' | awk '{print $1}' | cpio -pdmq ${ZONELIBTOP}
#
# remove ignored files
#
rm -f $(awk -v DEST=$ZONELIBTOP '{print DEST"/"$1}' /usr/lib/brand/tribblix-common/lib.ignorelist)
fi

#
# and remove any other files that should never exist in a zone
#
rm -f $(awk -v DEST=$ZONEROOT '{print DEST"/"$1}' /usr/lib/brand/tribblix-common/sparse.ignorelist)

#
# remove the desktop cache updates that we don't need in a read-only zone
#
rm -fr $ZONEROOT/var/svc/manifest/application/desktop-cache
rm -fr $ZONEROOT/lib/svc/manifest/application/font
#
# copy in a cleaned up contents file
#
TBFILE=/tmp/il.${ZONENAME}.fg.$$
cat /usr/lib/brand/tribblix-common/lib.ignorelist /usr/lib/brand/tribblix-common/sparse.ignorelist > $TBFILE
echo "/var/svc/manifest/application/desktop-cache" >> $TBFILE
echo "/lib/svc/manifest/application/font" >> $TBFILE
${EGREP} -v '^/(boot|kernel|devices|opt|platform)' /var/sadm/install/contents | ${FGREP} -v -f $TBFILE > $ZONEROOT/var/sadm/install/contents
rm -f $TBFILE

#
# end of templated if block
#
fi

printf "$m_smf"
PROFILEDIR=etc/svc/profile
rm -f $ZONEROOT/$PROFILEDIR/name_service.xml $ZONEROOT/$PROFILEDIR/generic.xml $ZONEROOT/$PROFILEDIR/inetd_services.xml $ZONEROOT/$PROFILEDIR/platform.xml
ln -s ns_files.xml $ZONEROOT/$PROFILEDIR/name_service.xml
ln -s generic_limited_net.xml $ZONEROOT/$PROFILEDIR/generic.xml
ln -s inetd_generic.xml $ZONEROOT/$PROFILEDIR/inetd_services.xml
ln -s platform_none.xml $ZONEROOT/$PROFILEDIR/platform.xml

# This was formerly done in i.manifest
repfile=$ZONEROOT/etc/svc/repository.db
cp ${TEMPLATEPATH}/lib/svc/seed/nonglobal.db $repfile
chmod 0600 $repfile
chown root:sys $repfile

printf "$m_done\n"

# ensure zap catalogs are present
cp -p ${TEMPLATEPATH}/etc/zap/repositories/*.catalog ${TEMPLATEPATH}/etc/zap/repositories/*.aliases ${TEMPLATEPATH}/etc/zap/repositories/*.overlays ${TEMPLATEPATH}/etc/zap/repositories/*.filelist.bz2 $ZONEROOT/etc/zap/repositories

printf "$m_complete\n\n" ${SECONDS}
printf "$m_postnote\n"
printf "$m_postnote2\n"

exit $ZONE_SUBPROC_OK
