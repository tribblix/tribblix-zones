#!/bin/ksh -p
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#

#
# Copyright (c) 2007, 2011, Oracle and/or its affiliates. All rights reserved.
#
# Copyright (c) 2013, 2015 Peter C. Tribble peter.tribble@gmail.com
#

. /usr/lib/brand/alien-root/common.ksh

f_interrupted=$(gettext "Installation cancelled due to interrupt.\n")

m_image=$(gettext       "       Image: Preparing at %s.")
m_smf=$(gettext		" Postinstall: Copying SMF seed repository ...")
m_more_brokenness=$(gettext " Postinstall: Applying workarounds.")

m_usage=$(gettext "\n        install [-h]\n        install {-a archive|-d path} {-p|-u} [-s|-v]")

m_done=$(gettext      " done.")

trap_cleanup() {
	print "$f_interrupted"
	exit $int_code
}

int_code=$ZONE_SUBPROC_NOTCOMPLETE
trap trap_cleanup INT

ZONENAME=""
ZONEPATH=""
template_mode=0

# Setup i18n output
TEXTDOMAIN="SUNW_OST_OSCMD"
export TEXTDOMAIN

unset iso_image
unset install_archive
unset source_dir
unset msg
unset silent_mode
unset verbose_mode

while getopts "a:d:e:hi:pR:sTuvz:" opt; do
	case $opt in
		a)	install_archive="-a $OPTARG";;
		d)	source_dir="-d $OPTARG";;
		h)	fail_usage "";;
		i)	iso_image="$OPTARG";;
		p)	preserve_zone="-p";;
		R)	ZONEPATH="$OPTARG" ;;
		s)	silent_mode=1;;
		T)	template_mode=1;;
		u)	unconfig_zone="-u";;
		v)	verbose_mode="-v";;
		z)	ZONENAME="$OPTARG" ;;
		*)	fail_usage "";;
	esac
done
shift $((OPTIND-1))

if [[ -z $ZONEPATH || -z $ZONENAME ]]; then
	print -u2 "Brand error: No zone path or name"
	exit $ZONE_SUBPROC_USAGE
fi

if [[ -z $iso_image ]]; then
	print -u2 "Brand error: No iso image specified"
	exit $ZONE_SUBPROC_USAGE
fi

# XXX shared/common script currently uses lower case zonename & zonepath
zonename="$ZONENAME"
zonepath="$ZONEPATH"

is_brand_labeled
brand_labeled=$?

ZONEROOT=$ZONEPATH/root

# An image install can't use both -a AND -d...
[[ -n "$install_archive" && -n "$source_dir" ]] &&
    fail_usage "$f_incompat_options" "-a" "-d"

# The install can't be both verbose AND silent...
[[ -n $silent_mode && -n $verbose_mode ]] && \
    fail_usage "$f_incompat_options" "-s" "-v"

# The install can't both preserve and unconfigure
[[ -n $unconfig_zone && -n $preserve_zone ]] && \
    fail_usage "$f_incompat_options" "-u" "-p"

# p2v options are only allowed when installing from an image
if [[ -z $install_archive && -z $source_dir ]]; then
	[[ -n $preserve_zone || -n $unconfig_zone ]] && \
		fail_usage "$f_incompat_options" "default" "-p|-u"
fi

#
# Before installing the zone, set up ZFS dataset hierarchy for the zone root
# dataset. If creating a template, the path should already exist and we use
# it as is.
#
if (( $template_mode == 0 )); then
  create_active_ds
else
    ZONEROOT=$ZONEPATH
    if [ ! -d $ZONEROOT ]; then
	echo "$ZONEROOT should already exist"
	exit $ZONE_SUBPROC_USAGE
    fi
fi

#
# If we're installing from an image, branch off to that installer.
#
if [[ -n $install_archive || -n $source_dir ]]; then
	/usr/lib/brand/alien-root/image_install $ZONENAME $ZONEPATH \
	    $install_archive $source_dir $verbose_mode $silent_mode \
	    $unconfig_zone $preserve_zone
	ii_result=$?

	if (( $ii_result != 0 )); then
		exit $ZONE_SUBPROC_NOTCOMPLETE
	fi
	exit $ZONE_SUBPROC_OK
fi

printf "$m_image\n" $ZONEROOT

#
# this is where we do all the work
#  unpack the iso
#
if [ ! -f $iso_image ]; then
    echo "Cannot find $iso_image"
    exit $ZONE_SUBPROC_USAGE
fi

/usr/lib/brand/alien-root/live-iso-unpack -d $ZONEROOT $iso_image

#
# this is where there be dragons
# unfortunately, /lib contains the SMF manifests (which is a pretty dumb
# place for them), so we must delete the manifests that aren't valid in a zone
#
rm -f ${ZONEROOT}/lib/svc/manifest/system/sysevent.xml
rm -f ${ZONEROOT}/lib/svc/manifest/system/wusb.xml
rm -f ${ZONEROOT}/lib/svc/manifest/network/iscsi/iscsi-initiator.xml
rm -f ${ZONEROOT}/lib/svc/manifest/network/network-discovery.xml
rm -f ${ZONEROOT}/lib/svc/manifest/system/hal.xml
rm -f ${ZONEROOT}/lib/svc/manifest/system/picl.xml
rm -f ${ZONEROOT}/lib/svc/manifest/system/poold.xml
rm -f ${ZONEROOT}/lib/svc/manifest/system/pools.xml
rm -f ${ZONEROOT}/lib/svc/manifest/system/device/devices-fc-fabric.xml
rm -f ${ZONEROOT}/lib/svc/manifest/system/filesystem/rmvolmgr.xml
rm -f ${ZONEROOT}/lib/svc/manifest/system/stmf.xml
rm -f ${ZONEROOT}/lib/svc/manifest/network/rpc/mdcomm.xml
rm -f ${ZONEROOT}/lib/svc/manifest/network/rpc/meta.xml
rm -f ${ZONEROOT}/lib/svc/manifest/network/rpc/metamed.xml
rm -f ${ZONEROOT}/lib/svc/manifest/network/rpc/metamh.xml
rm -f ${ZONEROOT}/lib/svc/manifest/system/mdmonitor.xml
rm -f ${ZONEROOT}/lib/svc/manifest/system/metainit.xml
rm -f ${ZONEROOT}/lib/svc/manifest/system/metasync.xml
rm -f ${ZONEROOT}/lib/svc/manifest/platform/i86pc/acpihpd.xml
rm -f ${ZONEROOT}/lib/svc/manifest/system/power.xml
rm -f ${ZONEROOT}/lib/svc/manifest/system/dumpadm.xml
rm -f ${ZONEROOT}/lib/svc/manifest/system/intrd.xml
rm -f ${ZONEROOT}/lib/svc/manifest/system/scheduler.xml
rm -f ${ZONEROOT}/lib/svc/manifest/network/lms.xml
rm -f ${ZONEROOT}/lib/svc/manifest/network/npiv_config.xml
rm -f ${ZONEROOT}/lib/svc/manifest/system/fcoe_initiator.xml
rm -f ${ZONEROOT}/lib/svc/manifest/system/fcoe_target.xml
rm -f ${ZONEROOT}/lib/svc/manifest/system/ipagent.xml
rm -f ${ZONEROOT}/lib/svc/manifest/system/resource-mgmt.xml
rm -f ${ZONEROOT}/lib/svc/manifest/system/zones.xml
rm -f ${ZONEROOT}/lib/svc/manifest/system/zonestat.xml
rm -f ${ZONEROOT}/lib/svc/manifest/system/auditset.xml
rm -f ${ZONEROOT}/lib/svc/manifest/system/device/devices-audio.xml
rm -f ${ZONEROOT}/lib/svc/manifest/system/keymap.xml

#
# if a template, we're done
#
if (( $template_mode == 1 )); then
    exit $ZONE_SUBPROC_OK
fi

printf "$m_smf"
PROFILEDIR=etc/svc/profile
rm -f $ZONEROOT/$PROFILEDIR/name_service.xml
rm -f $ZONEROOT/$PROFILEDIR/generic.xml
rm -f $ZONEROOT/$PROFILEDIR/inetd_services.xml
rm -f $ZONEROOT/$PROFILEDIR/platform.xml
ln -s ns_files.xml $ZONEROOT/$PROFILEDIR/name_service.xml
ln -s generic_limited_net.xml $ZONEROOT/$PROFILEDIR/generic.xml
ln -s inetd_generic.xml $ZONEROOT/$PROFILEDIR/inetd_services.xml
ln -s platform_none.xml $ZONEROOT/$PROFILEDIR/platform.xml

# This was formerly done in i.manifest
repfile=$ZONEROOT/etc/svc/repository.db
cp /lib/svc/seed/nonglobal.db $repfile
chmod 0600 $repfile
chown root:sys $repfile

printf "$m_done\n"

# Clean up root as a role and jack if needed
cat $ZONEROOT/etc/user_attr | /usr/bin/sed '/^root/s:;type=role::' > $ZONEROOT/etc/user_attr.n
mv $ZONEROOT/etc/user_attr.n $ZONEROOT/etc/user_attr
print "/^jack:/d\nw" | ed -s $ZONEROOT/etc/user_attr
print "/^jack:/d\nw" | ed -s $ZONEROOT/etc/passwd
chmod u+w $ZONEROOT/etc/shadow
print "/^jack:/d\nw" | ed -s $ZONEROOT/etc/shadow
chmod u-w $ZONEROOT/etc/shadow

#
# Make sure sysidtools run; we manually poke in the SSH action
# so that we get an SSH key.  Yes, this is seriously borken.
# See http://defect.opensolaris.org/bz/show_bug.cgi?id=741
#
printf "$m_more_brokenness\n"
/usr/sbin/sysidconfig -b $ZONEROOT -a /lib/svc/method/sshd
touch $ZONEROOT/etc/.UNCONFIGURED

printf "$m_complete\n\n" ${SECONDS}
if (( $brand_labeled == 0 )); then
	printf "$m_postnote\n"
	printf "$m_postnote2\n"
else
	# Umount the dataset on the root.
	umount $ZONEROOT || printf "$f_zfs_unmount" "$ZONEPATH/root"
fi

exit $ZONE_SUBPROC_OK
