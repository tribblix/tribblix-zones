#!/bin/ksh -p
#
# SPDX-License-Identifier: CDDL-1.0
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#

#
# Copyright (c) 2007, 2011, Oracle and/or its affiliates. All rights reserved.
#
# Copyright (c) 2013-2024 Peter C. Tribble peter.tribble@gmail.com
#

. /usr/lib/brand/tribblix-common/common.ksh

f_interrupted=$(gettext "Installation cancelled due to interrupt.\n")

m_image=$(gettext       "       Image: Preparing at %s.")
m_smf=$(gettext		" Postinstall: Copying SMF seed repository ...")

m_usage=$(gettext "\n        install [-h]\n        install -i image_file")

m_done=$(gettext      " done.")

trap_cleanup() {
	print "$f_interrupted"
	exit $int_code
}

int_code=$ZONE_SUBPROC_NOTCOMPLETE
trap trap_cleanup INT

ZONENAME=""
ZONEPATH=""
template_mode=0

# Setup i18n output
TEXTDOMAIN="SUNW_OST_OSCMD"
export TEXTDOMAIN

unset iso_image
unset msg

while getopts "hi:R:Tz:" opt; do
	case $opt in
		h)	fail_usage "";;
		i)	iso_image="$OPTARG";;
		R)	ZONEPATH="$OPTARG" ;;
		T)	template_mode=1;;
		z)	ZONENAME="$OPTARG" ;;
		*)	fail_usage "";;
	esac
done
shift $((OPTIND-1))

if [[ -z $ZONEPATH || -z $ZONENAME ]]; then
	print -u2 "Brand error: No zone path or name"
	exit $ZONE_SUBPROC_USAGE
fi

if [[ -z $iso_image ]]; then
	print -u2 "Brand error: No image file specified"
	exit $ZONE_SUBPROC_USAGE
fi

# XXX shared/common script currently uses lower case zonename & zonepath
zonename="$ZONENAME"
zonepath="$ZONEPATH"

ZONEROOT=$ZONEPATH/root

#
# Before installing the zone, set up ZFS dataset hierarchy for the zone root
# dataset. If creating a template, the path should already exist and we use
# it as is.
#
if (( $template_mode == 0 )); then
  create_active_ds
else
    ZONEROOT=$ZONEPATH
    if [ ! -d "$ZONEROOT" ]; then
	echo "$ZONEROOT should already exist"
	exit $ZONE_SUBPROC_USAGE
    fi
fi

printf "$m_image\n" "$ZONEROOT"

#
# this is where we do all the work
#  unpack the image
#
if [ ! -f "$iso_image" ]; then
    echo "Cannot find $iso_image"
    exit $ZONE_SUBPROC_USAGE
fi

#
# we can handle iso images, tarballs, and zfs send streams
#
case $iso_image in
    *.iso)
	/usr/lib/brand/alien-root/live-iso-unpack -d "$ZONEROOT" "$iso_image"
	if [ $? -ne 0 ]; then
	    exit $ZONE_SUBPROC_NOTCOMPLETE
	fi
	;;
    *.tar|*.tar.*)
	/usr/lib/brand/alien-root/mvi-unpack -d "$ZONEROOT" "$iso_image"
	if [ $? -ne 0 ]; then
	    exit $ZONE_SUBPROC_NOTCOMPLETE
	fi
	;;
    *.zfs|*.zfs.*)
	/usr/lib/brand/alien-root/zfs-unpack -d "$ZONEROOT" "$iso_image"
	if [ $? -ne 0 ]; then
	    exit $ZONE_SUBPROC_NOTCOMPLETE
	fi
	;;
    *)
	exit $ZONE_SUBPROC_NOTCOMPLETE
	;;
esac

#
# This is where the dragons live.
# Unfortunately, /lib contains the SMF manifests (which is an unfortunate
# place for them), so we must delete the manifests that aren't valid in a zone
#
for fignore in `cat /usr/lib/brand/tribblix-common/lib.ignorelist`
do
    rm -f "${ZONEROOT}/${fignore}"
done

#
# and remove any other files that should never exist in a zone
#
for fignore in `cat /usr/lib/brand/tribblix-common/sparse.ignorelist`
do
    rm -f "${ZONEROOT}/${fignore}"
done

#
# if a template, we're done
#
if (( $template_mode == 1 )); then
    exit $ZONE_SUBPROC_OK
fi

#
# if the image looks like it has SMF, then reset it to a non-live
# installation
#
PROFILEDIR=etc/svc/profile
if [ -d  "$ZONEROOT/$PROFILEDIR" ]; then
    printf "$m_smf"
    rm -f "$ZONEROOT/$PROFILEDIR/name_service.xml"
    rm -f "$ZONEROOT/$PROFILEDIR/generic.xml"
    rm -f "$ZONEROOT/$PROFILEDIR/inetd_services.xml"
    rm -f "$ZONEROOT/$PROFILEDIR/platform.xml"
    ln -s ns_files.xml "$ZONEROOT/$PROFILEDIR/name_service.xml"
    ln -s generic_limited_net.xml "$ZONEROOT/$PROFILEDIR/generic.xml"
    ln -s inetd_generic.xml "$ZONEROOT/$PROFILEDIR/inetd_services.xml"
    ln -s platform_none.xml "$ZONEROOT/$PROFILEDIR/platform.xml"

    # This was formerly done in i.manifest
    repfile=$ZONEROOT/etc/svc/repository.db
    cp /lib/svc/seed/nonglobal.db "$repfile"
    chmod 0600 "$repfile"
    chown root:sys "$repfile"

    printf "$m_done\n"
fi

# Clean up root as a role and jack if needed
/usr/bin/sed -i '/^root/s:;type=role::'  "$ZONEROOT/etc/user_attr"
print "/^jack:/d\nw" | ed -s "$ZONEROOT/etc/user_attr"
print "/^jack:/d\nw" | ed -s "$ZONEROOT/etc/passwd"
chmod u+w "$ZONEROOT/etc/shadow"
print "/^jack:/d\nw" | ed -s "$ZONEROOT/etc/shadow"
chmod u-w "$ZONEROOT/etc/shadow"

#
# if root has no password set, set it to a blank one
# Note: a blank password is not the same as a blank field in shadow
# this taken from Kayak
#
chmod u+w "$ZONEROOT/etc/shadow"
ROOTPW='$5$kr1VgdIt$OUiUAyZCDogH/uaxH71rMeQxvpDEY2yX.x0ZQRnmeb9'
sed -i -e 's%^root::%root:'$ROOTPW':%' "$ZONEROOT/etc/shadow"
chmod u-w "$ZONEROOT/etc/shadow"

#
# configure nsswitch.conf to match the global zone, as not all distros
# ship with sensible defaults
#
if [ -f "$ZONEROOT/etc/nsswitch.conf" ]; then
    cp /etc/nsswitch.conf "$ZONEROOT/etc/nsswitch.conf"
fi

#
# If this looks like an IPS system, attempt to change the pkg variant
# to a non-global zone. This may be unsuccessful, but there's no harm
# in trying.
#
if [ -x "$ZONEROOT/usr/bin/pkg" ]; then
    chroot "$ZONEROOT" /usr/bin/pkg change-variant variant.opensolaris.zone=nonglobal 2>/dev/null
fi

printf "$m_complete\n\n" ${SECONDS}
printf "$m_postnote\n"
printf "$m_postnote2\n"

exit $ZONE_SUBPROC_OK
