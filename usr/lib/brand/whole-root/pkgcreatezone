#!/bin/ksh -p
#
# SPDX-License-Identifier: CDDL-1.0
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#

#
# Copyright (c) 2007, 2011, Oracle and/or its affiliates. All rights reserved.
#
# Copyright (c) 2013-2024 Peter C. Tribble peter.tribble@gmail.com
#

. /usr/lib/brand/tribblix-common/common.ksh

f_interrupted=$(gettext "Installation cancelled due to interrupt.\n")

m_image=$(gettext       "       Image: Preparing at %s.")
m_smf=$(gettext		" Postinstall: Copying SMF seed repository ...")

m_usage=$(gettext "\n        install [-h]\n        [{-o|-O} overlay [...]]")

m_done=$(gettext      " done.")

trap_cleanup() {
	print "$f_interrupted"
	exit $int_code
}

int_code=$ZONE_SUBPROC_NOTCOMPLETE
trap trap_cleanup INT

copy_overlays=""
add_overlays=""
copy_packages=""
add_packages=""
ZONENAME=""
ZONEPATH=""
template_mode=0

# Setup i18n output
TEXTDOMAIN="SUNW_OST_OSCMD"
export TEXTDOMAIN

unset msg

while getopts "ho:O:p:P:R:Tz:" opt; do
	case $opt in
		h)	fail_usage "";;
		o)	copy_overlays="$copy_overlays $OPTARG" ;;
		O)	add_overlays="$add_overlays $OPTARG" ;;
		p)	copy_packages="$copy_packages $OPTARG" ;;
		P)	add_packages="$add_packages $OPTARG" ;;
		R)	ZONEPATH="$OPTARG" ;;
		T)	template_mode=1;;
		z)	ZONENAME="$OPTARG" ;;
		*)	fail_usage "";;
	esac
done
shift $((OPTIND-1))

if [[ -z $ZONEPATH || -z $ZONENAME ]]; then
	print -u2 "Brand error: No zone path or name"
	exit $ZONE_SUBPROC_USAGE
fi

# XXX shared/common script currently uses lower case zonename & zonepath
zonename="$ZONENAME"
zonepath="$ZONEPATH"

ZONEROOT=$ZONEPATH/root

#
# using ggrep is much faster on the invocations dealing with the
# contents file
#
GREP=/usr/bin/grep
EGREP=/usr/bin/egrep
FGREP=/usr/bin/fgrep
if [ -x /usr/gnu/bin/grep ]; then
    GREP=/usr/gnu/bin/grep
    EGREP="/usr/gnu/bin/grep -E"
    FGREP="/usr/gnu/bin/grep -F"
fi

#
# Before installing the zone, set up ZFS dataset hierarchy for the zone root
# dataset. If creating a template, the path should already exist and we use
# it as is.
#
if (( $template_mode == 0 )); then
  create_active_ds
else
    ZONEROOT=$ZONEPATH
    if [ ! -d "$ZONEROOT" ]; then
	echo "$ZONEROOT should already exist"
	exit $ZONE_SUBPROC_USAGE
    fi
fi

printf "$m_image\n" $ZONEROOT

#
# this is where we do all the work
#  clone other files from global zone
#

overlay_list_deps() {
    MYOVL=$1
    OVL=/var/sadm/overlays/${MYOVL}.ovl
    if [ -f ${OVL} ]; then
	echo $MYOVL
	for novl in `/usr/bin/awk -F= '{if ($1=="REQUIRES") print $2}' ${OVL}`
	do
	    echo $novl
	    overlay_list_deps $novl
	done
    fi
}

#
# as we parse the contents file, make sure it gets flushed
#
/usr/bin/pkgadm sync

#
# use -o to specify overlays, it follows dependencies and always installs
# the base overlay (just in case the dependency information is faulty)
#
# olist is the (recursive) list of overlays to copy
# plist is the list of all packages to copy
# solist is the unique list of overlays to copy
# splist is the unique list of packages to copy
# xplist is the list of excluded packages
# contents is the filtered contents file
#
CONTENTS_SOURCE="/var/sadm/install/contents"
if [ -n "$copy_overlays" ]; then
    echo "Configuring overlays: $copy_overlays"
    TDIR=/tmp/.zinstall-`date | digest -a md5`.$$
    mkdir $TDIR
    touch $TDIR/olist $TDIR/plist
    echo "base" >> ${TDIR}/olist
    for OVL in $copy_overlays
    do
	overlay_list_deps $OVL >> ${TDIR}/olist
    done
    cat ${TDIR}/olist | sort -u > ${TDIR}/solist
    for OVL in `cat ${TDIR}/solist`
    do
	if [ -f "/var/sadm/overlays/${OVL}.pkgs" ]; then
	    cat "/var/sadm/overlays/${OVL}.pkgs" >> ${TDIR}/plist
	fi
    done
    #
    # if we've been asked to copy packages, add them here
    # note that it makes no sense to copy packages unless we're copying
    # overlays, so it's fine to be inside the surrounding if
    #
    # we also resolve aliases at this point
    # there's a risky assumption here that all packages are in the TRIB
    # namespace
    #
    for extra_pkg in $copy_packages
    do
	add_pkg=$(/usr/lib/zap/resolve-alias $extra_pkg)
	case $add_pkg in
	    TRIB*)
		echo $add_pkg >> ${TDIR}/plist
		;;
	esac
    done
    cat ${TDIR}/plist | sort -u > ${TDIR}/splist
    #
    # we need to select all the lines containing the selected package names
    # we can't use grep -w because the hyphen in package names is a word
    # boundary causing some lines to be matched in error, so explicitly
    # look for the package name surrounded by space
    #
    cat ${TDIR}/splist | awk '{print "( |^)"$1"( |$)"}' > ${TDIR}/splist2
    /usr/gnu/bin/grep -E -f ${TDIR}/splist2 ${CONTENTS_SOURCE} > ${TDIR}/contents
    CONTENTS_SOURCE=${TDIR}/contents
    cd /var/sadm/pkg
    /bin/ls -1U | fgrep -xv -f ${TDIR}/splist > ${TDIR}/xplist
fi

#
# fortunately the contents file is sorted so that directories always come
# before the files they contain, just like cpio wants
#
cd /
${EGREP} '^/(etc|root|var|sbin|lib)' $CONTENTS_SOURCE | awk '{print $1}' | sed -e 's:=: :' -e 's:/::' | awk '{print $1}' | cpio -pdmq "$ZONEROOT"
# for /usr, cut is much quicker
${GREP} '^/usr' $CONTENTS_SOURCE | cut -f1 -d' ' | cut -f1 -d= | cpio -pdmq "$ZONEROOT"

#
# copy packaging metadata
#
if [ -n "$copy_overlays" ]; then
    /usr/bin/find var/sadm/overlays -print | cpio -pdmq "$ZONEROOT"
    mkdir -p $ZONEROOT/var/sadm/overlays/installed
    cd $ZONEROOT/var/sadm/overlays/installed
    rm *
    touch `cat ${TDIR}/solist`
    cd /var/sadm/pkg
    mkdir -p "$ZONEROOT/var/sadm/pkg"
    /usr/bin/find `cat ${TDIR}/splist` -name save -prune -o -print | cpio -pdmq "$ZONEROOT/var/sadm/pkg"
    cd /
else
    mkdir -p "$ZONEROOT/var/sadm/pkg"
    /usr/bin/find var/sadm/pkg/* var/sadm/overlays -name save -prune -o -print | cpio -pdmq "$ZONEROOT"
fi

#
# create standard locations
#
mkdir -p "$ZONEROOT/mnt" "$ZONEROOT/export"
mkdir -m 777 "$ZONEROOT/tmp"
ln -s ./usr/bin "$ZONEROOT/bin"

#
# use the saved pspool files, if we have them
# FIXME fix up the timestamps
# (the ownership and permissions should be correct from the original cpio)
#
cd /var/sadm/pkg
if [ -n "$copy_overlays" ]; then
    find `cat ${TDIR}/splist` -xdev -type f | ${EGREP} 'pspool/.*/reloc/(etc|root|var)' | awk -v DEST=$ZONEROOT '{s=$1; gsub(/.*reloc/,"",s); print "cp /var/sadm/pkg/"$1, DEST""s }' | sh -s
else
    find * -xdev -type f | ${EGREP} 'pspool/.*/reloc/(etc|root|var)' | awk -v DEST=$ZONEROOT '{s=$1; gsub(/.*reloc/,"",s); print "cp /var/sadm/pkg/"$1, DEST""s }' | sh -s
fi
cd /

#
# copy in a cleaned up contents file
# filter by installed overlays/packages
#
if [ -n "$copy_overlays" ]; then
    ${EGREP} -v '^/(boot|kernel|devices|opt|platform)' $CONTENTS_SOURCE | /bin/tr ' ' '\012' | fgrep -xv -f ${TDIR}/xplist | /bin/tr '\012' ' ' | /usr/bin/gsed 's: /:\n/:g' | /usr/bin/gsed 's: $:\n:g' > $ZONEROOT/var/sadm/install/contents
else
    ${EGREP} -v '^/(boot|kernel|devices|opt|platform)' $CONTENTS_SOURCE > $ZONEROOT/var/sadm/install/contents
fi

#
# remove metadata for any installed packages that populate /opt
# this must be done before adding additional overlays,
# which might populate /opt
#
for opkg in `${GREP} '^/opt ' /var/sadm/install/contents | cut -d ' ' -f7- | sed s:SUNWcs::` `cat /usr/lib/brand/tribblix-common/pkg.ignorelist`
do
    rm -fr "$ZONEROOT/var/sadm/pkg/$opkg"
done

#
# add additional overlays
#
if [ -n "$add_overlays" ]; then
    for novl in $add_overlays
    do
	/usr/bin/zap install-overlay -R "${ZONEROOT}" "$novl"
    done
    /usr/bin/pkgadm sync -R "${ZONEROOT}" -q
fi
#
# add additional packages
#
if [ -n "$add_packages" ]; then
    for extra_pkg in $add_packages
    do
	/usr/bin/zap install -R "${ZONEROOT}" "$extra_pkg"
    done
    /usr/bin/pkgadm sync -R "${ZONEROOT}" -q
fi

#
# This is where the dragons live.
# Unfortunately, /lib contains the SMF manifests (which is an unfortunate
# place for them), so we must delete the manifests that aren't valid in a zone
#
# we also remove files marked as invalid for a non-global zone by the
# illumos IPS manifests - for a whole root zone or a template this covers
# the sparse.ignorelist (which is files in /etc) and the whole.ignorelist
# (which is files in /usr, /sbin, and some libraries in /lib)
#

#
# create a combined ignorelist
#
TBFILE=/tmp/il.${ZONENAME}.fg.$$
cat /usr/lib/brand/tribblix-common/lib.ignorelist /usr/lib/brand/tribblix-common/sparse.ignorelist /usr/lib/brand/tribblix-common/whole.ignorelist > "$TBFILE"

#
# delete the files from the zone or template
#
rm -f $(awk -v DEST="$ZONEROOT" '{print DEST"/"$1}' "${TBFILE}")

#
# TODO: clean up empty directories that leaves behind
#

#
# clean the ignored entries from the contents file
#
mv "$ZONEROOT/var/sadm/install/contents" "$ZONEROOT/var/sadm/install/contents.raw"
cat "$ZONEROOT/var/sadm/install/contents.raw" | ${FGREP} -v -f "$TBFILE" > "$ZONEROOT/var/sadm/install/contents"
rm -f "$ZONEROOT/var/sadm/install/contents.raw" "$TBFILE"

#
# remove our temporary work area
#
if [ -n "$copy_overlays" ]; then
    rm -fr "$TDIR"
fi

# ensure zap catalogs are present
cp -p /etc/zap/repositories/*.catalog /etc/zap/repositories/*.aliases /etc/zap/repositories/*.overlays /etc/zap/repositories/*.filelist.bz2 "$ZONEROOT/etc/zap/repositories"

#
# if a template, we're done
#
if (( $template_mode == 1 )); then
    exit $ZONE_SUBPROC_OK
fi

printf "$m_smf"
PROFILEDIR=etc/svc/profile
rm -f "$ZONEROOT/$PROFILEDIR/name_service.xml" "$ZONEROOT/$PROFILEDIR/generic.xml" "$ZONEROOT/$PROFILEDIR/inetd_services.xml" "$ZONEROOT/$PROFILEDIR/platform.xml"
ln -s ns_files.xml "$ZONEROOT/$PROFILEDIR/name_service.xml"
ln -s generic_limited_net.xml "$ZONEROOT/$PROFILEDIR/generic.xml"
ln -s inetd_generic.xml "$ZONEROOT/$PROFILEDIR/inetd_services.xml"
ln -s platform_none.xml "$ZONEROOT/$PROFILEDIR/platform.xml"

# This was formerly done in i.manifest
repfile=$ZONEROOT/etc/svc/repository.db
cp /lib/svc/seed/nonglobal.db "$repfile"
chmod 0600 "$repfile"
chown root:sys "$repfile"

printf "$m_done\n"

#
# run any postinstall scripts
# manually skip anything running add_drv
#
cd $ZONEROOT/var/sadm/pkg
for pkg in *
do
    if [ -x /var/sadm/pkg/${pkg}/save/pspool/${pkg}/install/postinstall ]; then
	/usr/bin/grep -q add_drv /var/sadm/pkg/${pkg}/save/pspool/${pkg}/install/postinstall
	if (( $? != 0 )); then
	    echo "Executing postinstall for $pkg"
	    env BASEDIR=$ZONEROOT /var/sadm/pkg/${pkg}/save/pspool/${pkg}/install/postinstall
	fi
    fi
done
cd /

printf "$m_complete\n\n" ${SECONDS}
printf "$m_postnote\n"
printf "$m_postnote2\n"

exit $ZONE_SUBPROC_OK
