#!/bin/ksh -p
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#

#
# Copyright (c) 2007, 2011, Oracle and/or its affiliates. All rights reserved.
#
# Copyright (c) 2013, 2015 Peter C. Tribble peter.tribble@gmail.com
#

. /usr/lib/brand/tribblix-common/common.ksh

f_interrupted=$(gettext "Installation cancelled due to interrupt.\n")

m_image=$(gettext       "       Image: Preparing at %s.")
m_smf=$(gettext		" Postinstall: Copying SMF seed repository ...")
m_more_brokenness=$(gettext " Postinstall: Applying workarounds.")

m_usage=$(gettext "\n        install [-h]\n        [{-o|-O} overlay [...]]\n        install {-a archive|-d path} {-p|-u} [-s|-v]")

m_done=$(gettext      " done.")

trap_cleanup() {
	print "$f_interrupted"
	exit $int_code
}

int_code=$ZONE_SUBPROC_NOTCOMPLETE
trap trap_cleanup INT

copy_overlays=""
add_overlays=""
ZONENAME=""
ZONEPATH=""
template_mode=0

# Setup i18n output
TEXTDOMAIN="SUNW_OST_OSCMD"
export TEXTDOMAIN

unset install_archive
unset source_dir
unset msg
unset silent_mode
unset verbose_mode

while getopts "a:d:e:hpo:O:R:sTuvz:" opt; do
	case $opt in
		a)	install_archive="-a $OPTARG";;
		d)	source_dir="-d $OPTARG";;
		h)	fail_usage "";;
		o)	copy_overlays="$copy_overlays $OPTARG" ;;
		O)	add_overlays="$add_overlays $OPTARG" ;;
		p)	preserve_zone="-p";;
		R)	ZONEPATH="$OPTARG" ;;
		s)	silent_mode=1;;
		T)	template_mode=1;;
		u)	unconfig_zone="-u";;
		v)	verbose_mode="-v";;
		z)	ZONENAME="$OPTARG" ;;
		*)	fail_usage "";;
	esac
done
shift $((OPTIND-1))

if [[ -z $ZONEPATH || -z $ZONENAME ]]; then
	print -u2 "Brand error: No zone path or name"
	exit $ZONE_SUBPROC_USAGE
fi

# XXX shared/common script currently uses lower case zonename & zonepath
zonename="$ZONENAME"
zonepath="$ZONEPATH"

is_brand_labeled
brand_labeled=$?

ZONEROOT=$ZONEPATH/root

# An image install can't use both -a AND -d...
[[ -n "$install_archive" && -n "$source_dir" ]] &&
    fail_usage "$f_incompat_options" "-a" "-d"

# The install can't be both verbose AND silent...
[[ -n $silent_mode && -n $verbose_mode ]] && \
    fail_usage "$f_incompat_options" "-s" "-v"

# The install can't both preserve and unconfigure
[[ -n $unconfig_zone && -n $preserve_zone ]] && \
    fail_usage "$f_incompat_options" "-u" "-p"

# setting overlays not allowed when installing from a system image.
if [[ -n "$install_archive" || -n "$source_dir" ]]; then
	[[ -n "$copy_overlays" ]] && \
	    fail_usage "$f_incompat_options" "-a|-d" "-o"
fi

# adding overlays not allowed when installing from a system image.
if [[ -n "$install_archive" || -n "$source_dir" ]]; then
	[[ -n "$add_overlays" ]] && \
	    fail_usage "$f_incompat_options" "-a|-d" "-O"
fi

# p2v options are only allowed when installing from an image
if [[ -z $install_archive && -z $source_dir ]]; then
	[[ -n $preserve_zone || -n $unconfig_zone ]] && \
		fail_usage "$f_incompat_options" "default" "-p|-u"
fi

#
# Before installing the zone, set up ZFS dataset hierarchy for the zone root
# dataset. If creating a template, the path should already exist and we use
# it as is.
#
if (( $template_mode == 0 )); then
  create_active_ds
else
    ZONEROOT=$ZONEPATH
    if [ ! -d $ZONEROOT ]; then
	echo "$ZONEROOT should already exist"
	exit $ZONE_SUBPROC_USAGE
    fi
fi

#
# If we're installing from an image, branch off to that installer.
#
if [[ -n $install_archive || -n $source_dir ]]; then
	/usr/lib/brand/whole-root/image_install $ZONENAME $ZONEPATH \
	    $install_archive $source_dir $verbose_mode $silent_mode \
	    $unconfig_zone $preserve_zone
	ii_result=$?

	if (( $ii_result != 0 )); then
		exit $ZONE_SUBPROC_NOTCOMPLETE
	fi
	exit $ZONE_SUBPROC_OK
fi

printf "$m_image\n" $ZONEROOT

#
# this is where we do all the work
#  clone other files from global zone
#

overlay_list_deps() {
    MYOVL=$1
    OVL=/var/sadm/overlays/${MYOVL}.ovl
    if [ -f ${OVL} ]; then
	echo $MYOVL
	for novl in `/usr/bin/grep '^REQUIRES=' ${OVL} | /usr/bin/sed s:REQUIRES=::`
	do
	    echo $novl
	    overlay_list_deps $novl
	done
    fi
}

#
# as we parse the contents file, make sure it gets flushed
#
/usr/bin/pkgadm sync

#
# use -o to specify overlays, it follows dependencies and always installs
# the base overlay (just in case the dependency information is faulty)
#
# olist is the (recursive) list of overlays to copy
# plist is the list of all packages to copy
# solist is the unique list of overlays to copy
# splist is the unique list of packages to copy
# xplist is the list of excluded packages
# contents is the filtered contents file
#
CONTENTS_SOURCE="/var/sadm/install/contents"
if [ -n "$copy_overlays" ]; then
    echo "Configuring overlays: $copy_overlays"
    TDIR=/tmp/.zinstall-`date | digest -a md5`.$$
    mkdir $TDIR
    touch $TDIR/olist $TDIR/plist
    echo "base" >> ${TDIR}/olist
    for OVL in $copy_overlays
    do
	overlay_list_deps $OVL >> ${TDIR}/olist
    done
    cat ${TDIR}/olist | sort | uniq > ${TDIR}/solist
    for OVL in `cat ${TDIR}/solist`
    do
	if [ -f /var/sadm/overlays/${OVL}.pkgs ]; then
	    cat /var/sadm/overlays/${OVL}.pkgs >> ${TDIR}/plist
	fi
    done
    cat ${TDIR}/plist | sort | uniq > ${TDIR}/splist 
    /usr/gnu/bin/grep -F -w -f ${TDIR}/splist ${CONTENTS_SOURCE} > ${TDIR}/contents
    CONTENTS_SOURCE=${TDIR}/contents
    cd /var/sadm/pkg
    /bin/ls -1 | fgrep -xv -f ${TDIR}/splist > ${TDIR}/xplist
fi

#
# fortunately the contents file is sorted so that directories always come
# before the files they contain, just like cpio wants
#
cd /
grep '^/etc' $CONTENTS_SOURCE | nawk '{print $1}' | sed -e 's:=: :' -e 's:/::' | nawk '{print $1}' | cpio -pdm $ZONEROOT
grep '^/var' $CONTENTS_SOURCE | nawk '{print $1}' | sed 's:=: :' | nawk '{print $1}' | cpio -pdm $ZONEROOT
grep '^/usr' $CONTENTS_SOURCE | nawk '{print $1}' | sed 's:=: :' | nawk '{print $1}' | cpio -pdm $ZONEROOT
grep '^/sbin' $CONTENTS_SOURCE | nawk '{print $1}' | sed 's:=: :' | nawk '{print $1}' | cpio -pdm $ZONEROOT
grep '^/platform' $CONTENTS_SOURCE | nawk '{print $1}' | sed 's:=: :' | nawk '{print $1}' | cpio -pdm $ZONEROOT
grep '^/lib' $CONTENTS_SOURCE | nawk '{print $1}' | sed 's:=: :' | nawk '{print $1}' | cpio -pdm $ZONEROOT

#
# copy packaging metadata
#
if [ -n "$copy_overlays" ]; then
    /usr/bin/find var/sadm/overlays -print -depth | cpio -pdm $ZONEROOT
    mkdir -p $ZONEROOT/var/sadm/overlays/installed
    cd $ZONEROOT/var/sadm/overlays/installed
    rm *
    touch `cat ${TDIR}/solist`
    cd /var/sadm/pkg
    mkdir -p $ZONEROOT/var/sadm/pkg
    /usr/bin/find `cat ${TDIR}/splist` -print -depth | grep -v save/pspool | cpio -pdm $ZONEROOT/var/sadm/pkg
    cd /
else
    /usr/bin/find var/sadm/pkg var/sadm/overlays -print -depth | grep -v save/pspool | cpio -pdm $ZONEROOT
fi

#
# create standard locations
#
mkdir -p $ZONEROOT/mnt $ZONEROOT/opt $ZONEROOT/export
mkdir -m 777 $ZONEROOT/tmp
mkdir -m 700 $ZONEROOT/root
ln -s ./usr/bin $ZONEROOT/bin

#
# use the saved pspool files, if we have them
# FIXME fix up the timestamps
# (the ownership and permissions should be correct from the original cpio)
#
cd /var/sadm/pkg
if [ -n "$copy_overlays" ]; then
    find `cat ${TDIR}/splist` -xdev -type f | grep '.*/pspool/.*/reloc/etc' | nawk -v DEST=$ZONEROOT '{s=$1; gsub(/.*reloc/,"",s); print "cp /var/sadm/pkg/"$1, DEST""s }' | sh -s
    find `cat ${TDIR}/splist` -xdev -type f | grep '.*/pspool/.*/reloc/var' | nawk -v DEST=$ZONEROOT '{s=$1; gsub(/.*reloc/,"",s); print "cp /var/sadm/pkg/"$1, DEST""s }' | sh -s
else
    find * -xdev -type f | grep '.*/pspool/.*/reloc/etc' | nawk -v DEST=$ZONEROOT '{s=$1; gsub(/.*reloc/,"",s); print "cp /var/sadm/pkg/"$1, DEST""s }' | sh -s
    find * -xdev -type f | grep '.*/pspool/.*/reloc/var' | nawk -v DEST=$ZONEROOT '{s=$1; gsub(/.*reloc/,"",s); print "cp /var/sadm/pkg/"$1, DEST""s }' | sh -s
fi
cd /

#
# copy in a cleaned up contents file
# filter by installed overlays/packages
#
if [ -n "$copy_overlays" ]; then
    egrep -v '^/(boot|kernel|devices|opt)' $CONTENTS_SOURCE | /bin/tr ' ' '\012' | fgrep -xv -f ${TDIR}/xplist | /bin/tr '\012' ' ' | /usr/bin/gsed 's: /:\n/:g' | /usr/bin/gsed 's: $:\n:g' > $ZONEROOT/var/sadm/install/contents
else
    egrep -v '^/(boot|kernel|devices|opt)' $CONTENTS_SOURCE > $ZONEROOT/var/sadm/install/contents
fi

#
# remove metadata for any installed packages that populate /opt
# this must be done before adding additional overlays,
# which might populate /opt
#
for opkg in `grep '^/opt ' /var/sadm/install/contents | cut -d ' ' -f7- | sed s:SUNWcs::` `cat /usr/lib/brand/tribblix-common/pkg.blacklist`
do
    rm -fr $ZONEROOT/var/sadm/pkg/$opkg
done

#
# add additional overlays
#
if [ -n "$add_overlays" ]; then
    for novl in $add_overlays
    do
	/usr/bin/zap install-overlay -R ${ZONEROOT} $novl
    done
    pkgadm sync -R ${ZONEROOT} -q
fi

#
# This is where the dragons live.
# Unfortunately, /lib contains the SMF manifests (which is a pretty dumb
# place for them), so we must delete the manifests that aren't valid in a zone
#
for fblack in `cat /usr/lib/brand/tribblix-common/lib.blacklist`
do
    rm -f ${ZONEROOT}/${fblack}
done

#
# and remove any other files that should never exist in a zone
#
for fblack in `cat /usr/lib/brand/tribblix-common/std.blacklist`
do
    rm -f ${ZONEROOT}/${fblack}
done

#
# clean the blacklisted entries from the contents file
#
TBFILE=/tmp/bl.${ZONENAME}.fg.$$
cat /usr/lib/brand/tribblix-common/lib.blacklist /usr/lib/brand/tribblix-common/std.blacklist > $TBFILE
mv $ZONEROOT/var/sadm/install/contents $ZONEROOT/var/sadm/install/contents.raw
cat $ZONEROOT/var/sadm/install/contents.raw | fgrep -v -f $TBFILE > $ZONEROOT/var/sadm/install/contents
rm -f $ZONEROOT/var/sadm/install/contents.raw
rm -fr $TBFILE

#
# remove our temporary work area
#
if [ -n "$copy_overlays" ]; then
    rm -fr $TDIR
fi

#
# if a template, we're done
#
if (( $template_mode == 1 )); then
    exit $ZONE_SUBPROC_OK
fi

printf "$m_smf"
PROFILEDIR=etc/svc/profile
rm -f $ZONEROOT/$PROFILEDIR/name_service.xml
rm -f $ZONEROOT/$PROFILEDIR/generic.xml
rm -f $ZONEROOT/$PROFILEDIR/inetd_services.xml
rm -f $ZONEROOT/$PROFILEDIR/platform.xml
ln -s ns_files.xml $ZONEROOT/$PROFILEDIR/name_service.xml
ln -s generic_limited_net.xml $ZONEROOT/$PROFILEDIR/generic.xml
ln -s inetd_generic.xml $ZONEROOT/$PROFILEDIR/inetd_services.xml
ln -s platform_none.xml $ZONEROOT/$PROFILEDIR/platform.xml

# This was formerly done in i.manifest
repfile=$ZONEROOT/etc/svc/repository.db
cp /lib/svc/seed/nonglobal.db $repfile
chmod 0600 $repfile
chown root:sys $repfile

printf "$m_done\n"

# ensure zap catalogs are present
cp -p /etc/zap/repositories/*.catalog $ZONEROOT/etc/zap/repositories
cp -p /etc/zap/repositories/*.overlays $ZONEROOT/etc/zap/repositories

# Clean up root as a role and jack if needed
cat $ZONEROOT/etc/user_attr | /usr/bin/sed '/^root/s:;type=role::' > $ZONEROOT/etc/user_attr.n
mv $ZONEROOT/etc/user_attr.n $ZONEROOT/etc/user_attr
print "/^jack:/d\nw" | ed -s $ZONEROOT/etc/user_attr
print "/^jack:/d\nw" | ed -s $ZONEROOT/etc/passwd
chmod u+w $ZONEROOT/etc/shadow
print "/^jack:/d\nw" | ed -s $ZONEROOT/etc/shadow
chmod u-w $ZONEROOT/etc/shadow

#
# Make sure sysidtools run; we manually poke in the SSH action
# so that we get an SSH key.  Yes, this is seriously borken.
# See http://defect.opensolaris.org/bz/show_bug.cgi?id=741
#
printf "$m_more_brokenness\n"
/usr/sbin/sysidconfig -b $ZONEROOT -a /lib/svc/method/sshd
touch $ZONEROOT/etc/.UNCONFIGURED

printf "$m_complete\n\n" ${SECONDS}
if (( $brand_labeled == 0 )); then
	printf "$m_postnote\n"
	printf "$m_postnote2\n"
else
	# Umount the dataset on the root.
	umount $ZONEROOT || printf "$f_zfs_unmount" "$ZONEPATH/root"
fi

exit $ZONE_SUBPROC_OK
